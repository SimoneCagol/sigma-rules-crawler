{"description": "Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec", "author": ["Nasreddine Bencherchali"], "enabled": false, "false_positives": ["Unknown"], "filters": [], "from": "now-360s", "immutable": false, "index": ["winlogbeat-*"], "interval": "5m", "rule_id": "ba3f5c1b-6272-4119-9dbd-0bc8d21c2702", "language": "lucene", "max_signals": 100, "risk_score": 65, "name": "Potential WinAPI Calls Via CommandLine", "query": "(process.command_line.text:(*AddSecurityPackage* OR *AdjustTokenPrivileges* OR *Advapi32* OR *CloseHandle* OR *CreateProcessWithToken* OR *CreatePseudoConsole* OR *CreateRemoteThread* OR *CreateThread* OR *CreateUserThread* OR *DangerousGetHandle* OR *DuplicateTokenEx* OR *EnumerateSecurityPackages* OR *FreeHGlobal* OR *FreeLibrary* OR *GetDelegateForFunctionPointer* OR *GetLogonSessionData* OR *GetModuleHandle* OR *GetProcAddress* OR *GetProcessHandle* OR *GetTokenInformation* OR *ImpersonateLoggedOnUser* OR *kernel32* OR *LoadLibrary* OR *memcpy* OR *MiniDumpWriteDump* OR *ntdll* OR *OpenDesktop* OR *OpenProcess* OR *OpenProcessToken* OR *OpenThreadToken* OR *OpenWindowStation* OR *PtrToString* OR *QueueUserApc* OR *ReadProcessMemory* OR *RevertToSelf* OR *RtlCreateUserThread* OR *secur32* OR *SetThreadToken* OR *VirtualAlloc* OR *VirtualFree* OR *VirtualProtect* OR *WaitForSingleObject* OR *WriteInt32* OR *WriteProcessMemory* OR *ZeroFreeGlobalAllocUnicode*) AND (NOT (process.executable.text:*\\\\MpCmdRun.exe AND process.command_line.text:*GetLoadLibraryWAddress32*)))", "meta": {"from": "1m"}, "severity": "high", "tags": ["T1106"], "to": "now", "type": "query", "threat": [{"tactic": {"id": "TA0002", "reference": "https://attack.mitre.org/tactics/TA0002", "name": "Execution"}, "framework": "MITRE ATT&CK", "technique": [{"id": "T1106", "name": "Native API", "reference": "https://attack.mitre.org/techniques/T1106"}]}], "version": 1, "references": ["https://twitter.com/m417z/status/1566674631788007425"], "license": "https://github.com/Neo23x0/sigma/blob/master/LICENSE.Detection.Rules.md", "timestamp_override": "event.ingested"}
